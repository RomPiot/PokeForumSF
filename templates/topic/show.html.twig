{% extends 'base.html.twig' %}

{% block title %}{{ topic.title }} - PokeForum
{% endblock %}

{% block content %}
	
	<div id="pokemonLogoContainer">

		<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/International_Pok%C3%A9mon_logo.svg/1024px-International_Pok%C3%A9mon_logo.svg.png" alt="">

	</div>
	<div id="titreAndContent">
		<div class="d-flex justify-content-between align-items-center">
			<h1>{{ topic.title }}</h1>

			{% if topic.author == app.user %}
				<div>
					<a href="{{ path('topic_edit', {'id' : topic.id}) }}">Editer</a>
					<a href="{{ path('topic_remove', {'id' : topic.id}) }}">Supprimer</a>
				</div>
			{% endif %}

		</div>
		<p>{{ topic.content }}</p>
	</div>

	{% for comment in comments %}
		<div class="comment" data-id="{{ comment.id }}">


			<a class="avatar-link" href="{{ path('user_profile_show', {id: comment.author.id}) }}">
				<img class="avatar" src="{{ comment.author.avatar }}" alt="">
				<div class="topic-badge-container">
					<p>{{ comment.author.rank }}</p>

					{% for test in comment.author.badges%}
						<img style="width: 20px;height:20px;object-fit: contain;" src="{{ asset('images/pokemon_items/'~  test.image ) }}" alt="">
					{% endfor %}
				</div>

			</a>
			<div class="leftSideComment">
				<div class="d-flex justify-content-between align-items-center">
					<div class="usernameAndDate">
						<a href="{{ path('user_profile_show', {id: comment.author.id }) }}" class="username">
							<strong>
								{{ comment.author.username | capitalize  }}
							</strong>
						</a>
						,&nbsp;
						<p class="date">le
							{{  comment.createdat |date("d M Y Ã  H:i", "Europe/Paris")}}
						</p>

					</div>


					{% if comment.author == app.user %}
						<div>
							<a class="comment-edit" href="#">Editer</a>
							<a href="{{ path('comment_remove', {'id' : comment.id}) }}">Supprimer</a>
						</div>
					{% endif %}
				</div>


				{# {% endif %} #}
				<p class="commentContent">
					{{ comment.content }}
				</p>

			</div>
		</div>
	{% endfor %}
	{% if topic.isActive == true and commentForm is defined %}
		{{ form(commentForm) }}{% endif %}


		<style>

			.avatar {
				border-radius: 100%;
				width: 95px;
				margin: 10px;
				margin-left: 20px;
				margin-bottom: 0;
			}
			.comment {
				display: flex;
				padding-bottom: 15px;
				padding-top: 15px;
				border-bottom: 1px solid #cbd3da;
				border-top: 1px solid #cbd3da;
			}

			.username {
				height: 20px;
				color: black;
			}

			.leftSideComment {
				display: flex;
				flex-wrap: wrap;
				flex-direction: column;
				width: 100%;
				border-radius: 14px;
				padding: 15px;
				box-shadow: 3px 2px 8px #0000000f;
				background-image: linear-gradient(to top, #dfe9f3 0%, white 100%);
			}
			.commentContent {
				padding: 0 15px 15px;

			}
			.usernameAndDate {
				display: flex;
			}

			#pokemonLogoContainer {
				display: flex;
				justify-content: center;
				align-items: center;
				background-color: #343a40;
				border-radius: 15px;
				margin-top: 15px;

			}

			#pokemonLogoContainer > img {
				width: 60%;
			}

			#titreAndContent {
				background-image: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				border-radius: 15px;
				padding: 15px;
				margin-top: 15px;
				color: white;
				width: 100%;

			}


			.topic-badge-container{
				display: flex;
				flex-wrap: wrap;
				width: 130px;
				margin: 5px;
				justify-content: center;
			}

			.topic-badge-container >img{
				margin: 2px;
			}
			.topic-badge-container >p{
				width: 100%;
				text-align: center;
				margin:0;
				margin-bottom: 5px;
				color: black;
			}

			.avatar-link{
				background-image: linear-gradient(to top, #dfe9f3 0%, white 100%);				border-radius: 15px;
				margin: 10px;
				margin-top: 0;
				margin-bottom: 0;
				box-shadow: 3px 2px 8px #0000000f;

			}
		</style>
{% endblock %}

{% block javascripts %}
<script>

$(function () {
	var lastContent = "";

	$(".comment-edit").on("click", function (event) {
		event.preventDefault();

		let activeComment = $(this).parents(".leftSideComment").find(".commentContent");

		lastContent = activeComment.text();

		activeComment.prop("contenteditable", true);
		activeComment.focus();

	});

	$(".commentContent").on("keydown", function (event) {
		let activeCommentText = $(this).text();

		if ((event.key == 'Enter') || (event.key == 'Escape')) {	
			$(this).prop("contenteditable", false);
		}

		if (event.key == 'Escape') {
			$(this).text(lastContent);
		}

		if (event.key == 'Enter') {
			let commentId = $(this).parents(".comment").attr("data-id");
			
			
			axios.post("{{ path('comment_edit') }}",
			{
				comment_id: commentId,
				comment_content: activeCommentText	
			});

			
		}

	});
});
</script>
{% endblock %}
